package ru.otus.projectwork.apigateway.configuration;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Base64;
import java.util.Date;

/**
 * –§–∏–ª—å—Ç—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ JWT –¥–ª—è Spring Cloud Gateway.
 *
 * <p>–≠—Ç–æ—Ç —Ñ–∏–ª—å—Ç—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * <ul>
 *   <li>–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö Authorization –∏–ª–∏ cookies</li>
 *   <li>–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏</li>
 *   <li>–ò–∑–≤–ª–µ–∫–∞–µ—Ç clientId –∏–∑ –≤–∞–ª–∏–¥–Ω–æ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞</li>
 *   <li>–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-User-Id —Å clientId –¥–ª—è downstream —Å–µ—Ä–≤–∏—Å–æ–≤</li>
 *   <li>–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP 401 –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤</li>
 * </ul>
 *
 * @see AbstractGatewayFilterFactory
 * @see GatewayFilter
 */
@Slf4j
@Component
public class JwtAuthFilter extends AbstractGatewayFilterFactory<JwtAuthFilter.Config> {

    @Value("${jwt.secret.key}")
    private String secretKey;

    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è JwtAuthFilter.
     *
     * <p>–í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤,
     * –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
     */
    public static class Config {
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    }

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     */
    public JwtAuthFilter() {
        super(Config.class);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∏–Ω–∞.
     *
     * @throws IllegalStateException –µ—Å–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á JWT –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω
     */
    @PostConstruct
    public void validateConfig() {
        if (secretKey == null || secretKey.trim().isEmpty()) {
            throw new IllegalStateException("JWT secret key is not configured");
        }
        log.info("‚úÖ JwtAuthFilter initialized with secret key");
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ JWT —Ç–æ–∫–µ–Ω–æ–≤.
     *
     * @return SecretKey —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∏–∑ base64-–∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
     */
    private SecretKey getSigningKey() {
        byte[] keyBytes = Base64.getDecoder().decode(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç GatewayFilter –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
     *
     * <p>–§–∏–ª—å—Ç—Ä –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π:
     * <ol>
     *   <li>–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º</li>
     *   <li>–ò–∑–≤–ª–µ–∫–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ cookies</li>
     *   <li>–í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –∏ –µ–≥–æ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è</li>
     *   <li>–ò–∑–≤–ª–µ–∫–∞–µ—Ç clientId –∏–∑ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-User-Id</li>
     *   <li>–ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–∞–ª—å—à–µ –ø–æ —Ü–µ–ø–æ—á–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É</li>
     * </ol>
     *
     * @param config –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
     * @return GatewayFilter –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
     */
    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            String path = exchange.getRequest().getPath().value();
            String method = exchange.getRequest().getMethod().name();

            log.debug("üîê Checking authentication for {} {}", method, path);

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏
            if (isPublicPath(path)) {
                log.debug("‚úÖ Public path, skipping authentication for {}", path);
                return chain.filter(exchange);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω
            String token = extractToken(exchange.getRequest());
            if (token == null) {
                log.warn("‚ùå No JWT token found in request for {}", path);
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }

            if (validateToken(token)) {
                log.debug("‚úÖ Token is valid, proceeding with request to {}", path);

                // –î–æ–±–∞–≤–ª—è–µ—Ç userId –≤ headers –¥–ª—è downstream —Å–µ—Ä–≤–∏—Å–æ–≤
                String userId = getUserIdFromToken(token);
                if (userId != null) {
                    ServerHttpRequest mutatedRequest = exchange.getRequest()
                            .mutate()
                            .header("X-User-Id", userId)
                            .build();
                    exchange = exchange.mutate().request(mutatedRequest).build();
                    log.debug("üë§ Added X-User-Id header: {}", userId);
                } else {
                    log.warn("‚ö†Ô∏è userId is null, cannot add X-User-Id header");
                    try {
                        Claims claims = Jwts.parser()
                                .verifyWith(getSigningKey())
                                .build()
                                .parseSignedClaims(token)
                                .getPayload();
                        log.debug("üîç All token claims: {}", claims);
                    } catch (Exception e) {
                        log.error("üö® Failed to parse token for debugging: {}", e.getMessage());
                    }
                }

                return chain.filter(exchange);
            } else {
                log.warn("‚ùå Invalid JWT token for path: {}", path);
                exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
                return exchange.getResponse().setComplete();
            }
        };
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω.
     *
     * <p>–ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
     * <ul>
     *   <li>–ü–æ–¥–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞</li>
     *   <li>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ (expiration)</li>
     * </ul>
     *
     * @param token JWT —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     * @return true –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
     */
    private boolean validateToken(String token) {
        try {
            Claims claims = Jwts.parser()
                    .verifyWith(getSigningKey())
                    .build()
                    .parseSignedClaims(token)
                    .getPayload();

            if (claims.getExpiration().before(new Date())) {
                log.warn("‚è∞ Token expired at: {}", claims.getExpiration());
                return false;
            }

            log.debug("üîç Token validated for user: {}, expires: {}",
                    claims.getSubject(), claims.getExpiration());
            return true;
        } catch (Exception e) {
            log.error("üö® Token validation failed: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞.
     *
     * <p>–ü—ã—Ç–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å clientId –≤ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ:
     * <ol>
     *   <li>–ò–∑ claims –ø–æ –∫–ª—é—á—É "clientId"</li>
     *   <li>–ò–∑ subject —Ç–æ–∫–µ–Ω–∞, –µ—Å–ª–∏ clientId –Ω–µ –Ω–∞–π–¥–µ–Ω</li>
     * </ol>
     *
     * @param token JWT —Ç–æ–∫–µ–Ω
     * @return clientId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å
     */
    private String getUserIdFromToken(String token) {
        try {
            Claims claims = Jwts.parser()
                    .verifyWith(getSigningKey())
                    .build()
                    .parseSignedClaims(token)
                    .getPayload();

            // –°–ø–æ—Å–æ–± 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ get() —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π null
            String clientId = claims.get("clientId", String.class);
            if (clientId != null) {
                log.debug("üîç Extracted clientId from token: {}", clientId);
                return clientId;
            }

            // –°–ø–æ—Å–æ–± 2: –ß–µ—Ä–µ–∑ getSubject() –µ—Å–ª–∏ clientId –≤ subject
            String subject = claims.getSubject();
            if (subject != null && !subject.isEmpty()) {
                log.debug("üîç Using subject as userId: {}", subject);
                return subject;
            }

            log.warn("‚ö†Ô∏è Neither clientId nor subject found in token");
            return null;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Could not extract clientId from token: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø—É—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º (–Ω–µ —Ç—Ä–µ–±—É—é—â–∏–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏).
     *
     * <p>–ü—É–±–ª–∏—á–Ω—ã–µ –ø—É—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç:
     * <ul>
     *   <li>API –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Gateway: /api/users/public/**</li>
     *   <li>–ü—Ä—è–º—ã–µ –ø—É—Ç–∏ –∫ User Service: /user-service/public/**</li>
     *   <li>Actuator endpoints: /actuator/health, /actuator/info, /actuator/user-service/**</li>
     * </ul>
     *
     * @param path –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞
     * @return true –µ—Å–ª–∏ –ø—É—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π, false –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
     */
    private boolean isPublicPath(String path) {
        boolean isPublic =
                // –ü—É–±–ª–∏—á–Ω—ã–µ API —á–µ—Ä–µ–∑ Gateway
                path.startsWith("/api/users/public/") ||
                        // –ü—Ä—è–º—ã–µ –ø—É—Ç–∏ –∫ User Service
                        path.startsWith("/user-service/public/") ||
                        // Actuator endpoints
                        path.equals("/actuator/health") ||
                        path.equals("/actuator/info") ||
                        path.startsWith("/actuator/user-service/") ||
                        path.startsWith("/actuator/account-service/");

        log.debug("üõ£Ô∏è Path: {} -> Public: {}", path, isPublic);
        return isPublic;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ HTTP –∑–∞–ø—Ä–æ—Å–∞.
     *
     * <p>–ò—â–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –º–µ—Å—Ç–∞—Ö (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞):
     * <ol>
     *   <li>–ó–∞–≥–æ–ª–æ–≤–æ–∫ Authorization —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º "Bearer "</li>
     *   <li>Cookie —Å –∏–º–µ–Ω–µ–º "accessToken"</li>
     * </ol>
     *
     * @param request HTTP –∑–∞–ø—Ä–æ—Å
     * @return JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
     */
    private String extractToken(ServerHttpRequest request) {
        String authHeader = request.getHeaders().getFirst("Authorization");
        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String token = authHeader.substring(7);
            log.debug("üîë Extracted token from Authorization header");
            return token;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ cookies –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è cookie-based auth
        String cookieHeader = request.getHeaders().getFirst("Cookie");
        if (cookieHeader != null && cookieHeader.contains("accessToken=")) {
            String token = extractTokenFromCookie(cookieHeader);
            if (token != null) {
                log.debug("üç™ Extracted token from accessToken cookie");
                return token;
            }
        }

        log.debug("üì≠ No token found in headers or cookies");
        return null;
    }

    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω –∏–∑ —Å—Ç—Ä–æ–∫–∏ cookie.
     *
     * @param cookieHeader –∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Cookie
     * @return JWT —Ç–æ–∫–µ–Ω –∏–ª–∏ null –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
     */
    private String extractTokenFromCookie(String cookieHeader) {
        try {
            String[] cookies = cookieHeader.split(";");
            for (String cookie : cookies) {
                if (cookie.trim().startsWith("accessToken=")) {
                    return cookie.split("=")[1].trim();
                }
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è Error extracting token from cookie: {}", e.getMessage());
        }
        return null;
    }
}
